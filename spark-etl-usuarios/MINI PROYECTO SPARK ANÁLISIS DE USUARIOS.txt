# MINI PROYECTO SPARK: ANÁLISIS DE USUARIOS

# ─────────────────────────────────────────────────────────────
# 🛠️ 1. IMPORTAR LIBRERÍAS Y CREAR SESIÓN SPARK
# ─────────────────────────────────────────────────────────────
from pyspark.sql import SparkSession
from pyspark.sql.functions import col, when, avg, count, round

spark = SparkSession.builder \
    .appName("Proyecto ETL Usuarios") \
    .getOrCreate()

# ─────────────────────────────────────────────────────────────
# 📥 2. CARGAR DATOS DESDE CSV
# ─────────────────────────────────────────────────────────────
df = spark.read.csv("/content/usuarios.csv", header=True, inferSchema=True)
df.show(5)
df.printSchema()

# ─────────────────────────────────────────────────────────────
# 🧹 3. LIMPIEZA DE DATOS
# Eliminar duplicados y registros con valores nulos en columnas clave
# ─────────────────────────────────────────────────────────────
df_clean = df.dropDuplicates().dropna(subset=["nombre", "edad", "ciudad"])
df_clean.show(5)

# ─────────────────────────────────────────────────────────────
# 🔧 4. TRANSFORMACIONES
# Agregar columna "es_adulto" y "rango_edad"
# ─────────────────────────────────────────────────────────────
df_transformed = df_clean.withColumn(
    "es_adulto", when(col("edad") >= 18, True).otherwise(False)
).withColumn(
    "rango_edad", when(col("edad") < 18, "menor")
    .when((col("edad") >= 18) & (col("edad") <= 29), "no es")
    .when((col("edad") >= 30) & (col("edad") <= 59), "adulto")
    .otherwise("mayor")
)

df_transformed.show(5)

# ─────────────────────────────────────────────────────────────
# 📊 5. ANÁLISIS: ESTADÍSTICAS POR CIUDAD
# Contar usuarios y calcular edad promedio por ciudad
# ─────────────────────────────────────────────────────────────
df_estadisticas = df_transformed.groupBy("ciudad").agg(
    count("*").alias("total_usuarios"),
    round(avg("edad"), 1).alias("edad_promedio")
)

df_estadisticas.show()

# ─────────────────────────────────────────────────────────────
# 💾 6. GUARDAR RESULTADOS EN CSV
# Se guardan en /content para Google Colab o local si estás en Jupyter
# ─────────────────────────────────────────────────────────────
df_transformed.write.mode("overwrite").option("header", "true") \
    .csv("/content/usuarios_transformados.csv")

df_estadisticas.write.mode("overwrite").option("header", "true") \
    .csv("/content/estadisticas_ciudad.csv")

# ─────────────────────────────────────────────────────────────